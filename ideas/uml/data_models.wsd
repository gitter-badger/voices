@startuml

interface Marshallable {
	..default method..
	isMarshallPossible() : boolean
}

' defines the only needed methods that each macro has to know to execute the desired actions '
interface Action implements Marshallable {
	execute(ctx: Context) : ReturnValue
}

' a wrapper class used to return any exceptions that happended while executing a action '
class ReturnValue {
	-message : String
	-exception : Exception

	ReturnValue(msg : String, exception : Exception)

	getMessage() : String
	getException() : Exception
}

' can be used to call some global utility methods '
class Context {
	+getConfiguration() : Configuration
	+setProgressValue(value : double) : void
	+getProgressValue() : double
	+setStatusMessage(msg : String) : void
	+getSpeechEngine() : SpeechEngige
	+getActiveProfile() : Profile
	+getNotificationCenter() : NotificationCenter
	+displayDialog(title : String, subtitle : String, msg : String, type : Type)
}

enum Type { 
	INFO
	ERROR
	WARNING
}

interface Configuration {
	+getConfigurationDirectory() : Path 
	+getLanguage() : String 
}

' used to generate a language model or set a grammar file for the profile '
class LanguageContructor {
	-grammarFile : Path
	-languageModelFile : Path
	-useGrammarFile : boolean

	+LanguageContructor(grammarFile : Path)
	+LanguageContructor(file : Path, useGrammarFile : boolean)

	-generateLanguageFile(file : Path) : Path
	-generateGrammarFile(file : Path) : Path

	+getLanguage() : Language
}

class Language implements Marshallable {
	-usingGrammarFile : boolean

	+getLanguageModelFile() : Path
	+getGrammarFile() : Path
	+isUsingGrammarFile() : boolean
}

class Macro implements Marshallable {
	-name : String
	-description : String

	+getActions() : List
	+getDescription() : String
	+getName() : String
}

class InstanceManager {
	-lockFile : Path
	-memoryMappedFile : Path

	+InstanceManager(lockFile : Path, memoryMappedFile : Path)

	+addInstanceListener(listener : InstanceListener)
	+removeInstanceListener(listener : InstanceListener) : boolean
	+clear() : void
}

interface InstanceListener {
	+newInstance(args : String[])
}

interface SpeechEngige {
	+toggleListening() : void
	+setListening(listening : boolean) : void
	+isListening() : boolean
	+stop() : void
	+start() : void
}

' a profile. each profile holds multiple macros that can be activated '
class Profile implements Marshallable {
	-name : String
	-author : String
	-website : String
	-license : String
	..set/get methods..

	..actions..
	+executeMacro(name : String) : boolean
	+getLanguage() : Language
	+getMacros() : Map
}

'NOTIFICATION'

interface NotificationCenter {
	+displayNotification(title : String, subtitle : String, text : String, varargs : String)
	+isPlatformSupported(platform : Platform) : boolean
}

class Windows10NotificationCenter implements NotificationCenter {

}
class Windows8NotificationCenter implements NotificationCenter {

}
class MacNotificationCenter implements NotificationCenter {

}

class NotificationFactory {
	+{static}getInstance() : NotificationFactory
	+getNotificationCenter() : NotificationCenter
}

'UTILITY'
class SystemUtils {
	+getPlatform() : Platform
	+isPlatform(platform : Platform) : boolean
}

enum Platform {
	UNIX
	LINUX
	MAC_OS_X
	WINDOWS_XP
	WINDOWS_7
	WINDOWS_8
	WINDOWS_8_1
	WINDOWS_10
}

'########################################################################'
' associations (creation for arrows etc) '

Action -- ReturnValue
Action .. Context

Profile "1" -- "1" Language : -language
Profile "1" o- "0..*" Macro : -macros : Map

Macro "1" o- "0..*" Action : -actions : List

Context -- Configuration
Context -- NotificationCenter
Context -- Profile
Context -- SpeechEngige
Context -- Type

SystemUtils .. Platform

NotificationCenter -- Platform
NotificationCenter -- NotificationFactory

InstanceManager -- InstanceListener

'########################################################################'
'note section'

note right of LanguageContructor
	Used to generate a language from either a grammar file or a language model.
	A language model is just a file that contains the probabilities of each word 
	that is used in the language. They can be generated by using a file with 
	example sentences. One sentence a line.
end note

note bottom of Windows10NotificationCenter
	Might need some COM Interface programming 
	using BridJ I guess...
end note

note bottom of MacNotificationCenter
	Use AppleScript and ProcessBuilder for 
	an easy solution that is stable at the same time
end note

note bottom of Configuration
	Bind interface to map using Reflection...
end note

@enduml